# Generated by Django 2.0.5 on 2018-11-14 21:16

from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Analog',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('analog_type', models.CharField(choices=[('Active Filters', 'Active Filter'), ('Passive Filters', 'Passive Filter')], help_text='Enter the type of analog circuit to be modeled.', max_length=1000)),
                ('name', models.CharField(help_text='Enter the name of this design in the admin page. REQUIRED.', max_length=1000)),
                ('url', models.CharField(default='1', help_text='Enter the url to be used to access this model. REQUIRED.', max_length=1000)),
                ('description', models.TextField(default='1', help_text='Enter a description of the circuit to be modeled.')),
                ('open_input_output_transfer', models.TextField(default='Default.', help_text='Enter the input to output transfer function of the design.', max_length=5000)),
                ('open_input_impedance', models.TextField(default='Default.', help_text='Enter the input impedance of the design.', max_length=5000)),
                ('open_output_impedance', models.TextField(default='Default.', help_text='Enter the output impedance of the design.', max_length=5000)),
            ],
            options={
                'verbose_name': 'Analog Model',
                'ordering': ['name'],
                'verbose_name_plural': 'Analog Models',
            },
        ),
        migrations.CreateModel(
            name='AnalogElectronics',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='CircuitDesign',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('circuit_name', models.CharField(default='Test', help_text='Enter a circuit name for information only at the top level. Circuit names will be contained in individual model fields.', max_length=1000)),
                ('circuit_design_type', models.CharField(choices=[('FPGA', 'FPGA Design'), ('Analog', 'Analog Circuit Design'), ('Power', 'Power Electronics Circuit Design')], default=('FPGA', 'FPGA Design'), help_text='Enter the type of circuit of this circuit to be analyzed.', max_length=1000)),
                ('dc_dc_circuit_analysis', models.BooleanField(default=False, help_text='Check if this is DC/DC Circuit Analysis')),
                ('fpga_analysis', models.BooleanField(default=False, help_text='Check if this is FPGA Circuit Analysis')),
                ('analog_analysis', models.BooleanField(default=False, help_text='Check if this is Analog Circuit Analysis')),
                ('analog_design', models.ManyToManyField(to='circuit_designs.Analog')),
            ],
        ),
        migrations.CreateModel(
            name='DCDC',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('pe_circuit_type', models.CharField(choices=[('SMPS', 'Switch-Mode Power Supplies')], help_text='Enter the type of power electronic circuit to be modeled.', max_length=1000)),
                ('smps_circuit_type', models.CharField(choices=[('DCDC', 'DC-DC Converters')], help_text='Enter the type of switch mode power supply to be modeled.', max_length=1000)),
                ('dcdc_type', models.CharField(choices=[('CCM', 'Continuous Conduction Mode')], help_text='Enter the type of DC-DC converter to be modeled.', max_length=1000)),
                ('name', models.CharField(help_text='Enter the name of this converter in the admin page. REQUIRED.', max_length=1000)),
                ('url', models.CharField(default='1', help_text='Enter the url to be used to access this model. REQUIRED.', max_length=1000)),
                ('description', models.TextField(default='1', help_text='Enter a description of the circuit to be modeled.')),
                ('open_input_output_transfer', models.TextField(default='Default.', help_text='Enter the input to output transfer function of the converter.', max_length=5000)),
                ('open_input_impedance', models.TextField(default='Default.', help_text='Enter the input impedance of the converter.', max_length=5000)),
                ('open_output_impedance', models.TextField(default='Default.', help_text='Enter the output impedance of the converter.', max_length=5000)),
                ('open_duty_output_transfer', models.TextField(default='Default.', help_text='Enter the duty to output transfer function of the converter.', max_length=5000)),
                ('closed_loop_analysis', models.BooleanField(default=False, help_text='Check if this DC/DC converter will be analyzed in a closed-loop fashion.')),
                ('closed_input_output_transfer', models.TextField(default='Default.', help_text='Enter the input to output transfer function of the converter.', max_length=5000)),
                ('closed_input_impedance', models.TextField(default='Default.', help_text='Enter the input impedance of the converter.', max_length=5000)),
                ('closed_output_impedance', models.TextField(default='Default.', help_text='Enter the output impedance of the converter.', max_length=5000)),
                ('closed_duty_output_transfer', models.TextField(default='Default.', help_text='Enter the duty to output transfer function of the converter.', max_length=5000)),
            ],
            options={
                'verbose_name': 'DC/DC Model',
                'ordering': ['name'],
                'verbose_name_plural': 'DC/DC Models',
            },
        ),
        migrations.CreateModel(
            name='DesignParamChoices',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('params', models.CharField(max_length=1000)),
            ],
            options={
                'verbose_name': 'param',
                'ordering': ['params'],
                'verbose_name_plural': 'Design Parameters',
            },
        ),
        migrations.CreateModel(
            name='FPGA',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('fpga_circuit_type', models.CharField(choices=[('Controllers', 'Controller')], help_text='Enter the type of power electronic circuit to be modeled.', max_length=1000)),
                ('name', models.CharField(help_text='Enter the name of this converter in the admin page. REQUIRED.', max_length=1000)),
                ('url', models.CharField(default='1', help_text='Enter the url to be used to access this model. REQUIRED.', max_length=1000)),
                ('description', models.TextField(default='1', help_text='Enter a description of the circuit to be modeled.')),
                ('fpga_code', models.TextField(default='Default.', help_text='Please enter the VHDL code for the FPGA design.')),
            ],
            options={
                'verbose_name': 'FPGA Model',
                'ordering': ['name'],
                'verbose_name_plural': 'FPGA Models',
            },
        ),
        migrations.CreateModel(
            name='OpenLoopAnalysisEquations',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('circuit_url', models.CharField(max_length=200)),
                ('equation_name', models.CharField(max_length=200)),
                ('equation', models.TextField(default='1', help_text='Enter the equation to be used to analyze the converter.', max_length=1000)),
                ('units', models.CharField(default='1', help_text='Enter the units of the resulting equation.', max_length=200)),
            ],
            options={
                'verbose_name': 'Open-Loop Analysis Equation',
                'ordering': ['circuit_url'],
                'verbose_name_plural': 'Open-Loop Analysis Equations',
            },
        ),
        migrations.CreateModel(
            name='PowerElectronics',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='RecommendedComponents',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('components', models.CharField(max_length=100)),
                ('circuit_name', models.CharField(default='1', help_text='Enter the name of this converter in the admin page.', max_length=200)),
                ('equation', models.TextField(default='1', help_text='Enter the equation used to generate this recommended component.', max_length=5000)),
            ],
            options={
                'verbose_name': 'component',
                'ordering': ['components'],
                'verbose_name_plural': 'Recommended Components',
            },
        ),
        migrations.CreateModel(
            name='SelectedComponents',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('selected_components_for_analysis', models.CharField(max_length=1000)),
            ],
            options={
                'verbose_name': 'Selected Component',
                'ordering': ['selected_components_for_analysis'],
                'verbose_name_plural': 'Selected Components',
            },
        ),
        migrations.CreateModel(
            name='SMPS',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.AddField(
            model_name='dcdc',
            name='design_params',
            field=models.ManyToManyField(to='circuit_designs.DesignParamChoices'),
        ),
        migrations.AddField(
            model_name='dcdc',
            name='open_loop_analysis_equations',
            field=models.ManyToManyField(help_text='For example, efficient, output current, etc.', to='circuit_designs.OpenLoopAnalysisEquations'),
        ),
        migrations.AddField(
            model_name='dcdc',
            name='recommended_components',
            field=models.ManyToManyField(to='circuit_designs.RecommendedComponents'),
        ),
        migrations.AddField(
            model_name='dcdc',
            name='selected_components',
            field=models.ManyToManyField(to='circuit_designs.SelectedComponents'),
        ),
        migrations.AddField(
            model_name='circuitdesign',
            name='dc_dc_analysis',
            field=models.ManyToManyField(to='circuit_designs.DCDC'),
        ),
        migrations.AddField(
            model_name='circuitdesign',
            name='fpga_design',
            field=models.ManyToManyField(to='circuit_designs.FPGA'),
        ),
        migrations.AddField(
            model_name='analog',
            name='design_params',
            field=models.ManyToManyField(to='circuit_designs.DesignParamChoices'),
        ),
        migrations.AddField(
            model_name='analog',
            name='open_loop_analysis_equations',
            field=models.ManyToManyField(help_text='For example, efficient, output current, etc.', to='circuit_designs.OpenLoopAnalysisEquations'),
        ),
        migrations.AddField(
            model_name='analog',
            name='recommended_components',
            field=models.ManyToManyField(to='circuit_designs.RecommendedComponents'),
        ),
        migrations.AddField(
            model_name='analog',
            name='selected_components',
            field=models.ManyToManyField(to='circuit_designs.SelectedComponents'),
        ),
    ]
